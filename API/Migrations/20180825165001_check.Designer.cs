// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(SigmaContext))]
    [Migration("20180825165001_check")]
    partial class check
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("API.Models.EventNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("DateSent");

                    b.Property<int>("EventId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventNotifications");
                });

            modelBuilder.Entity("API.Models.EventoGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("EventoId");

                    b.Property<int>("GrupoId");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("EventoGrupo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EventoGrupo");
                });

            modelBuilder.Entity("API.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Anio");

                    b.Property<string>("DocenteId");

                    b.Property<int>("Grado");

                    b.Property<int>("Numero");

                    b.Property<int>("OrientacionId");

                    b.Property<int>("TurnoId");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("OrientacionId");

                    b.HasIndex("TurnoId");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("API.Models.GrupoDocente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocenteId");

                    b.Property<int>("GrupoId");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("GrupoId");

                    b.ToTable("GrupoDocente");
                });

            modelBuilder.Entity("API.Models.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Url")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Imagen");
                });

            modelBuilder.Entity("API.Models.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("API.Models.MateriaOrientacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MateriaId");

                    b.Property<int>("OrientacionId");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.HasIndex("OrientacionId");

                    b.ToTable("MateriaOrientacion");
                });

            modelBuilder.Entity("API.Models.Orientacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Orientaciones");
                });

            modelBuilder.Entity("API.Models.TareaImagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ImagenId");

                    b.Property<int>("TareaId");

                    b.HasKey("Id");

                    b.HasIndex("ImagenId");

                    b.HasIndex("TareaId");

                    b.ToTable("TareaImagen");
                });

            modelBuilder.Entity("API.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("API.Models.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Models.Escrito", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<string>("DocenteId");

                    b.Property<int>("MateriaId");

                    b.Property<string>("Temas");

                    b.HasIndex("DocenteId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Escrito");

                    b.HasDiscriminator().HasValue("Escrito");
                });

            modelBuilder.Entity("API.Models.Parcial", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<string>("DocenteId")
                        .HasColumnName("Parcial_DocenteId");

                    b.Property<int>("MateriaId")
                        .HasColumnName("Parcial_MateriaId");

                    b.Property<string>("Temas")
                        .HasColumnName("Parcial_Temas");

                    b.HasIndex("DocenteId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Parcial");

                    b.HasDiscriminator().HasValue("Parcial");
                });

            modelBuilder.Entity("API.Models.Tarea", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<string>("Contenido");

                    b.Property<string>("DocenteId")
                        .HasColumnName("Tarea_DocenteId");

                    b.Property<int>("MateriaId")
                        .HasColumnName("Tarea_MateriaId");

                    b.HasIndex("DocenteId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Tarea");

                    b.HasDiscriminator().HasValue("Tarea");
                });

            modelBuilder.Entity("API.Models.EscritoGrupo", b =>
                {
                    b.HasBaseType("API.Models.EventoGrupo");

                    b.Property<int?>("EscritoId");

                    b.HasIndex("EscritoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("EscritoGrupo");

                    b.HasDiscriminator().HasValue("EscritoGrupo");
                });

            modelBuilder.Entity("API.Models.ParcialGrupo", b =>
                {
                    b.HasBaseType("API.Models.EventoGrupo");

                    b.Property<int?>("ParcialId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("ParcialId");

                    b.ToTable("ParcialGrupo");

                    b.HasDiscriminator().HasValue("ParcialGrupo");
                });

            modelBuilder.Entity("API.Models.TareaGrupo", b =>
                {
                    b.HasBaseType("API.Models.EventoGrupo");

                    b.Property<int?>("TareaId");

                    b.HasIndex("GrupoId")
                        .HasName("IX_EventoGrupo_GrupoId1");

                    b.HasIndex("TareaId");

                    b.ToTable("TareaGrupo");

                    b.HasDiscriminator().HasValue("TareaGrupo");
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");


                    b.ToTable("AppUser");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("API.Models.Admin", b =>
                {
                    b.HasBaseType("API.Models.AppUser");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("API.Models.Alumno", b =>
                {
                    b.HasBaseType("API.Models.AppUser");

                    b.Property<int>("GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("Alumno");

                    b.HasDiscriminator().HasValue("Alumno");
                });

            modelBuilder.Entity("API.Models.Docente", b =>
                {
                    b.HasBaseType("API.Models.AppUser");

                    b.Property<int>("MateriaId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Docente");

                    b.HasDiscriminator().HasValue("Docente");
                });

            modelBuilder.Entity("API.Models.EventNotification", b =>
                {
                    b.HasOne("API.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("API.Models.EventoGrupo", b =>
                {
                    b.HasOne("API.Models.Event", "Evento")
                        .WithMany("EventoGrupos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Grupo", b =>
                {
                    b.HasOne("API.Models.Docente")
                        .WithMany("Grupos")
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Orientacion", "Orientacion")
                        .WithMany("Grupos")
                        .HasForeignKey("OrientacionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Turno", "Turno")
                        .WithMany("Grupos")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.GrupoDocente", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany("GrupoDocentes")
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("GrupoDocentes")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.MateriaOrientacion", b =>
                {
                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany("MateriaOrientacion")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Orientacion", "Orientacion")
                        .WithMany("MateriaOrientacion")
                        .HasForeignKey("OrientacionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.TareaImagen", b =>
                {
                    b.HasOne("API.Models.Imagen", "Imagen")
                        .WithMany("TareaImagen")
                        .HasForeignKey("ImagenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Tarea", "Tarea")
                        .WithMany("TareaImagen")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Token", b =>
                {
                    b.HasOne("API.Models.AppUser", "User")
                        .WithMany("Token")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Escrito", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Parcial", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Tarea", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany("Tareas")
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany("Tareas")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.EscritoGrupo", b =>
                {
                    b.HasOne("API.Models.Escrito")
                        .WithMany("GruposAsignados")
                        .HasForeignKey("EscritoId");

                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.ParcialGrupo", b =>
                {
                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Parcial")
                        .WithMany("GruposAsignados")
                        .HasForeignKey("ParcialId");
                });

            modelBuilder.Entity("API.Models.TareaGrupo", b =>
                {
                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("TareaGrupo")
                        .HasForeignKey("GrupoId")
                        .HasConstraintName("FK_EventoGrupo_Grupos_GrupoId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Tarea")
                        .WithMany("TareaGrupos")
                        .HasForeignKey("TareaId");
                });

            modelBuilder.Entity("API.Models.Alumno", b =>
                {
                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("Alumnos")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Docente", b =>
                {
                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany("Docentes")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
