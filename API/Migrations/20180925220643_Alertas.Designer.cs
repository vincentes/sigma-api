// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(SigmaContext))]
    [Migration("20180925220643_Alertas")]
    partial class Alertas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Models.Alerta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Creado");

                    b.Property<string>("Estado");

                    b.HasKey("Id");

                    b.ToTable("Alertas");
                });

            modelBuilder.Entity("API.Models.Aviso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Avisos");
                });

            modelBuilder.Entity("API.Models.CambioDeSalon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("HoraMateriaFinalId");

                    b.Property<int>("HoraMateriaInicialId");

                    b.Property<int>("SalonCambioId");

                    b.Property<int>("SalonFinalId");

                    b.Property<int>("SalonInicialId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HoraMateriaFinalId");

                    b.HasIndex("HoraMateriaInicialId");

                    b.HasIndex("SalonCambioId");

                    b.HasIndex("SalonFinalId");

                    b.HasIndex("SalonInicialId");

                    b.ToTable("CambioDeSalones");
                });

            modelBuilder.Entity("API.Models.EncuestaGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdscriptoId");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("AdscriptoId");

                    b.ToTable("EncuestasGlobales");
                });

            modelBuilder.Entity("API.Models.EscritoGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("EscritoId");

                    b.Property<int>("GrupoId");

                    b.Property<bool>("Notified");

                    b.HasKey("Id");

                    b.HasIndex("EscritoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("EscritoGrupo");
                });

            modelBuilder.Entity("API.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("API.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Anio");

                    b.Property<string>("DocenteId");

                    b.Property<int>("Grado");

                    b.Property<int>("Numero");

                    b.Property<int>("OrientacionId");

                    b.Property<int>("TurnoId");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("OrientacionId");

                    b.HasIndex("TurnoId");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("API.Models.GrupoDocente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocenteId");

                    b.Property<int>("GrupoId");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("GrupoId");

                    b.ToTable("GrupoDocente");
                });

            modelBuilder.Entity("API.Models.HoraMateria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dia");

                    b.Property<int>("GrupoId");

                    b.Property<int>("Hora");

                    b.Property<int>("MateriaId");

                    b.Property<int>("SalonId");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("SalonId");

                    b.ToTable("HoraMaterias");
                });

            modelBuilder.Entity("API.Models.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Url")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Imagen");
                });

            modelBuilder.Entity("API.Models.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("API.Models.MateriaOrientacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MateriaId");

                    b.Property<int>("OrientacionId");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.HasIndex("OrientacionId");

                    b.ToTable("MateriaOrientacion");
                });

            modelBuilder.Entity("API.Models.OpcionRespuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OpcionId");

                    b.Property<int>("RespuestaId");

                    b.HasKey("Id");

                    b.ToTable("OpcionRespuesta");
                });

            modelBuilder.Entity("API.Models.Orientacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Orientaciones");
                });

            modelBuilder.Entity("API.Models.Parcial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocenteId");

                    b.Property<int>("MateriaId");

                    b.Property<string>("Temas");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Parciales");
                });

            modelBuilder.Entity("API.Models.ParcialGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("GrupoId");

                    b.Property<bool>("Notified");

                    b.Property<int>("ParcialId");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("ParcialId");

                    b.ToTable("ParcialGrupo");
                });

            modelBuilder.Entity("API.Models.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("EncuestaId");

                    b.Property<string>("Texto");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaId");

                    b.ToTable("Preguntas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pregunta");
                });

            modelBuilder.Entity("API.Models.PreguntaOpcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PreguntaId");

                    b.Property<int?>("RespuestaMOId");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaId");

                    b.HasIndex("RespuestaMOId");

                    b.ToTable("PreguntaOpciones");
                });

            modelBuilder.Entity("API.Models.Respuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlumnoId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("PreguntaId");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("PreguntaId");

                    b.ToTable("Respuestas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Respuesta");
                });

            modelBuilder.Entity("API.Models.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Salones");
                });

            modelBuilder.Entity("API.Models.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contenido");

                    b.Property<string>("DocenteId");

                    b.Property<int>("EventoId");

                    b.Property<int>("MateriaId");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("EventoId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("API.Models.TareaGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("GrupoId");

                    b.Property<bool>("Notified");

                    b.Property<int>("TareaId");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("TareaId");

                    b.ToTable("TareaGrupo");
                });

            modelBuilder.Entity("API.Models.TareaImagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ImagenId");

                    b.Property<int>("TareaId");

                    b.HasKey("Id");

                    b.HasIndex("ImagenId");

                    b.HasIndex("TareaId");

                    b.ToTable("TareaImagen");
                });

            modelBuilder.Entity("API.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("API.Models.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Models.Escrito", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<string>("DocenteId");

                    b.Property<int>("MateriaId");

                    b.Property<string>("Temas");

                    b.HasIndex("DocenteId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Escrito");

                    b.HasDiscriminator().HasValue("Escrito");
                });

            modelBuilder.Entity("API.Models.PreguntaLibre", b =>
                {
                    b.HasBaseType("API.Models.Pregunta");


                    b.ToTable("PreguntaLibre");

                    b.HasDiscriminator().HasValue("PreguntaLibre");
                });

            modelBuilder.Entity("API.Models.PreguntaVariada", b =>
                {
                    b.HasBaseType("API.Models.Pregunta");


                    b.ToTable("PreguntaVariada");

                    b.HasDiscriminator().HasValue("PreguntaVariada");
                });

            modelBuilder.Entity("API.Models.RespuestaLibre", b =>
                {
                    b.HasBaseType("API.Models.Respuesta");

                    b.Property<int?>("PreguntaLibreId");

                    b.Property<string>("Texto");

                    b.HasIndex("PreguntaLibreId");

                    b.ToTable("RespuestaLibre");

                    b.HasDiscriminator().HasValue("RespuestaLibre");
                });

            modelBuilder.Entity("API.Models.RespuestaLimitada", b =>
                {
                    b.HasBaseType("API.Models.Respuesta");

                    b.Property<int?>("PreguntaOpcionId");

                    b.Property<int?>("PreguntaVariadaId");

                    b.HasIndex("PreguntaOpcionId");

                    b.HasIndex("PreguntaVariadaId");

                    b.ToTable("RespuestaLimitada");

                    b.HasDiscriminator().HasValue("RespuestaLimitada");
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");


                    b.ToTable("AppUser");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("API.Models.PreguntaMO", b =>
                {
                    b.HasBaseType("API.Models.PreguntaVariada");


                    b.ToTable("PreguntaMO");

                    b.HasDiscriminator().HasValue("PreguntaMO");
                });

            modelBuilder.Entity("API.Models.RespuestaMO", b =>
                {
                    b.HasBaseType("API.Models.RespuestaLimitada");


                    b.ToTable("RespuestaMO");

                    b.HasDiscriminator().HasValue("RespuestaMO");
                });

            modelBuilder.Entity("API.Models.Admin", b =>
                {
                    b.HasBaseType("API.Models.AppUser");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("API.Models.Adscripto", b =>
                {
                    b.HasBaseType("API.Models.AppUser");


                    b.ToTable("Adscripto");

                    b.HasDiscriminator().HasValue("Adscripto");
                });

            modelBuilder.Entity("API.Models.Alumno", b =>
                {
                    b.HasBaseType("API.Models.AppUser");

                    b.Property<int>("GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("Alumno");

                    b.HasDiscriminator().HasValue("Alumno");
                });

            modelBuilder.Entity("API.Models.Docente", b =>
                {
                    b.HasBaseType("API.Models.AppUser");

                    b.Property<int>("MateriaId");

                    b.HasIndex("MateriaId");

                    b.ToTable("Docente");

                    b.HasDiscriminator().HasValue("Docente");
                });

            modelBuilder.Entity("API.Models.CambioDeSalon", b =>
                {
                    b.HasOne("API.Models.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("API.Models.HoraMateria", "HoraMateriaFinal")
                        .WithMany()
                        .HasForeignKey("HoraMateriaFinalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.HoraMateria", "HoraMateriaInicial")
                        .WithMany()
                        .HasForeignKey("HoraMateriaInicialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Salon", "SalonCambio")
                        .WithMany()
                        .HasForeignKey("SalonCambioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Salon", "SalonFinal")
                        .WithMany()
                        .HasForeignKey("SalonFinalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Salon", "SalonInicial")
                        .WithMany()
                        .HasForeignKey("SalonInicialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.EncuestaGlobal", b =>
                {
                    b.HasOne("API.Models.Adscripto", "Adscripto")
                        .WithMany("Encuestas")
                        .HasForeignKey("AdscriptoId");
                });

            modelBuilder.Entity("API.Models.EscritoGrupo", b =>
                {
                    b.HasOne("API.Models.Escrito", "Escrito")
                        .WithMany("GruposAsignados")
                        .HasForeignKey("EscritoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("EscritoGrupo")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Grupo", b =>
                {
                    b.HasOne("API.Models.Docente")
                        .WithMany("Grupos")
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Orientacion", "Orientacion")
                        .WithMany("Grupos")
                        .HasForeignKey("OrientacionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Turno", "Turno")
                        .WithMany("Grupos")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.GrupoDocente", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany("GrupoDocentes")
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("GrupoDocentes")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.HoraMateria", b =>
                {
                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.MateriaOrientacion", b =>
                {
                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany("MateriaOrientacion")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Orientacion", "Orientacion")
                        .WithMany("MateriaOrientacion")
                        .HasForeignKey("OrientacionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.OpcionRespuesta", b =>
                {
                    b.HasOne("API.Models.PreguntaOpcion", "Opcion")
                        .WithMany("OpcionRespuestas")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.RespuestaMO", "Respuesta")
                        .WithMany("Respuestas")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Parcial", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.ParcialGrupo", b =>
                {
                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("ParcialGrupo")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Parcial", "Parcial")
                        .WithMany("GruposAsignados")
                        .HasForeignKey("ParcialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Pregunta", b =>
                {
                    b.HasOne("API.Models.EncuestaGlobal", "Encuesta")
                        .WithMany("Preguntas")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.PreguntaOpcion", b =>
                {
                    b.HasOne("API.Models.PreguntaVariada", "Pregunta")
                        .WithMany("Opciones")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.RespuestaMO")
                        .WithMany("RespuestaOpciones")
                        .HasForeignKey("RespuestaMOId");
                });

            modelBuilder.Entity("API.Models.Respuesta", b =>
                {
                    b.HasOne("API.Models.Alumno", "Alumno")
                        .WithMany("Respuestas")
                        .HasForeignKey("AlumnoId");

                    b.HasOne("API.Models.Pregunta", "Pregunta")
                        .WithMany()
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Tarea", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany("Tareas")
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Event", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany("Tareas")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.TareaGrupo", b =>
                {
                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("TareaGrupo")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Tarea", "Tarea")
                        .WithMany("GruposAsignados")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.TareaImagen", b =>
                {
                    b.HasOne("API.Models.Imagen", "Imagen")
                        .WithMany("TareaImagen")
                        .HasForeignKey("ImagenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Tarea", "Tarea")
                        .WithMany("TareaImagen")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Token", b =>
                {
                    b.HasOne("API.Models.AppUser", "User")
                        .WithMany("Token")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Escrito", b =>
                {
                    b.HasOne("API.Models.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId");

                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.RespuestaLibre", b =>
                {
                    b.HasOne("API.Models.PreguntaLibre")
                        .WithMany("Respuestas")
                        .HasForeignKey("PreguntaLibreId");
                });

            modelBuilder.Entity("API.Models.RespuestaLimitada", b =>
                {
                    b.HasOne("API.Models.PreguntaOpcion")
                        .WithMany("RespuestasAsociadas")
                        .HasForeignKey("PreguntaOpcionId");

                    b.HasOne("API.Models.PreguntaVariada")
                        .WithMany("Respuestas")
                        .HasForeignKey("PreguntaVariadaId");
                });

            modelBuilder.Entity("API.Models.Alumno", b =>
                {
                    b.HasOne("API.Models.Grupo", "Grupo")
                        .WithMany("Alumnos")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Docente", b =>
                {
                    b.HasOne("API.Models.Materia", "Materia")
                        .WithMany("Docentes")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
