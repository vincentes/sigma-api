// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(SigmaContext))]
    partial class SigmaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Administrador", b =>
                {
                    b.Property<int>("IdAdministrador")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Administrador")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdUsrAdmin")
                        .HasColumnName("Id_Usr_Admin");

                    b.HasKey("IdAdministrador");

                    b.HasIndex("IdUsrAdmin");

                    b.ToTable("ADMINISTRADOR");
                });

            modelBuilder.Entity("API.Models.Adscripto", b =>
                {
                    b.Property<int>("IdAdscripto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Adscripto")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdUsrAdscripto")
                        .HasColumnName("Id_Usr_Adscripto");

                    b.Property<int>("TurnoAdscripto")
                        .HasColumnName("Turno_Adscripto");

                    b.HasKey("IdAdscripto");

                    b.HasIndex("IdUsrAdscripto");

                    b.HasIndex("TurnoAdscripto");

                    b.ToTable("ADSCRIPTO");
                });

            modelBuilder.Entity("API.Models.Alumno", b =>
                {
                    b.Property<int>("IdAlumno")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Alumno")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GrupoUsr")
                        .HasColumnName("Grupo_Usr");

                    b.Property<int>("IdUsrAlumno")
                        .HasColumnName("Id_Usr_Alumno");

                    b.HasKey("IdAlumno");

                    b.HasIndex("GrupoUsr");

                    b.HasIndex("IdUsrAlumno");

                    b.ToTable("ALUMNO");
                });

            modelBuilder.Entity("API.Models.Beacon", b =>
                {
                    b.Property<string>("IdBeacon")
                        .HasColumnName("Id_Beacon")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int>("IdNodoBeacon")
                        .HasColumnName("Id_Nodo_Beacon");

                    b.Property<string>("StatusNodo")
                        .IsRequired()
                        .HasColumnName("Status_Nodo")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("IdBeacon", "IdNodoBeacon");

                    b.HasIndex("IdNodoBeacon");

                    b.ToTable("BEACON");
                });

            modelBuilder.Entity("API.Models.Docente", b =>
                {
                    b.Property<int>("IdDocente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Docente")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdUsrDocente")
                        .HasColumnName("Id_Usr_Docente");

                    b.Property<int>("MateriaDocente")
                        .HasColumnName("Materia_Docente");

                    b.HasKey("IdDocente");

                    b.HasIndex("IdUsrDocente");

                    b.HasIndex("MateriaDocente");

                    b.ToTable("DOCENTE");
                });

            modelBuilder.Entity("API.Models.Encuesta", b =>
                {
                    b.Property<int>("IdEncuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Encuesta")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreadorEncuesta")
                        .HasColumnName("Creador_Encuesta");

                    b.Property<string>("DescripcionEncuesta")
                        .IsRequired()
                        .HasColumnName("Descripcion_Encuesta")
                        .HasMaxLength(600)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaEncuesta")
                        .HasColumnName("Fecha_Encuesta")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaFinEncuesta")
                        .HasColumnName("Fecha_Fin_Encuesta")
                        .HasColumnType("datetime");

                    b.Property<string>("TituloEncuesta")
                        .IsRequired()
                        .HasColumnName("Titulo_Encuesta")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdEncuesta");

                    b.HasIndex("CreadorEncuesta");

                    b.ToTable("ENCUESTA");
                });

            modelBuilder.Entity("API.Models.Grupo", b =>
                {
                    b.Property<int>("IdGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Grupo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnioGrupo")
                        .HasColumnName("Anio_grupo");

                    b.Property<int>("GradoGrupo")
                        .HasColumnName("Grado_Grupo");

                    b.Property<int>("NumeroGrupo")
                        .HasColumnName("Numero_Grupo");

                    b.Property<int>("OrientacionGrupo")
                        .HasColumnName("Orientacion_Grupo");

                    b.Property<int?>("TurnoGrupo")
                        .HasColumnName("Turno_Grupo");

                    b.HasKey("IdGrupo");

                    b.HasIndex("OrientacionGrupo");

                    b.HasIndex("TurnoGrupo");

                    b.ToTable("GRUPO");
                });

            modelBuilder.Entity("API.Models.Hora", b =>
                {
                    b.Property<int>("IdHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Hora")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("FinHora")
                        .HasColumnName("Fin_Hora");

                    b.Property<TimeSpan>("InicioHora")
                        .HasColumnName("Inicio_Hora");

                    b.HasKey("IdHora");

                    b.ToTable("HORA");
                });

            modelBuilder.Entity("API.Models.Horario", b =>
                {
                    b.Property<int>("IdGrupoHorario")
                        .HasColumnName("Id_Grupo_Horario");

                    b.Property<string>("DiaHorario")
                        .HasColumnName("Dia_Horario")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("HoraHorario")
                        .HasColumnName("Hora_Horario");

                    b.Property<int>("IdDocenteHorario")
                        .HasColumnName("Id_Docente_Horario");

                    b.Property<int>("IdMateriaHorario")
                        .HasColumnName("Id_Materia_Horario");

                    b.Property<int>("IdSalon")
                        .HasColumnName("Id_Salon");

                    b.HasKey("IdGrupoHorario", "DiaHorario", "HoraHorario");

                    b.HasIndex("HoraHorario");

                    b.HasIndex("IdDocenteHorario");

                    b.HasIndex("IdMateriaHorario");

                    b.HasIndex("IdSalon");

                    b.ToTable("HORARIO");
                });

            modelBuilder.Entity("API.Models.HoraTurno", b =>
                {
                    b.Property<int>("IdHt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_HT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliasHt")
                        .IsRequired()
                        .HasColumnName("Alias_HT")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("HoraHt")
                        .HasColumnName("Hora_HT");

                    b.Property<int>("TurnoHt")
                        .HasColumnName("Turno_HT");

                    b.HasKey("IdHt");

                    b.HasIndex("HoraHt");

                    b.HasIndex("TurnoHt");

                    b.ToTable("HORA_TURNO");
                });

            modelBuilder.Entity("API.Models.Materia", b =>
                {
                    b.Property<int>("IdMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Materia")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreMateria")
                        .IsRequired()
                        .HasColumnName("Nombre_Materia")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("OrientacionMateria")
                        .HasColumnName("Orientacion_Materia");

                    b.HasKey("IdMateria");

                    b.HasIndex("OrientacionMateria");

                    b.ToTable("MATERIA");
                });

            modelBuilder.Entity("API.Models.Nodo", b =>
                {
                    b.Property<int>("IdNodo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Nodo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PisoNodo")
                        .IsRequired()
                        .HasColumnName("Piso_Nodo")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("PosXNodo")
                        .HasColumnName("PosX_Nodo");

                    b.Property<int>("PosYNodo")
                        .HasColumnName("PosY_Nodo");

                    b.Property<string>("TipoNodo")
                        .IsRequired()
                        .HasColumnName("Tipo_Nodo")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdNodo");

                    b.ToTable("NODO");
                });

            modelBuilder.Entity("API.Models.Notificacion", b =>
                {
                    b.Property<int>("IdNotificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Notificacion")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DestinoNotificacion")
                        .IsRequired()
                        .HasColumnName("Destino_Notificacion")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaNotificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Fecha_Notificacion")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MensajeNotificacion")
                        .IsRequired()
                        .HasColumnName("Mensaje_Notificacion")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("TituloNotificacion")
                        .IsRequired()
                        .HasColumnName("Titulo_Notificacion")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.HasKey("IdNotificacion");

                    b.ToTable("NOTIFICACION");
                });

            modelBuilder.Entity("API.Models.NotificacionDestinatario", b =>
                {
                    b.Property<int>("IdNd")
                        .HasColumnName("Id_ND");

                    b.Property<int>("IdDestinatario")
                        .HasColumnName("Id_Destinatario");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnName("Fecha_Entrega")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEnvio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Fecha_Envio")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("GrupoActualUsr")
                        .HasColumnName("Grupo_Actual_Usr");

                    b.HasKey("IdNd", "IdDestinatario");

                    b.HasIndex("GrupoActualUsr");

                    b.HasIndex("IdDestinatario");

                    b.ToTable("NOTIFICACION_DESTINATARIO");
                });

            modelBuilder.Entity("API.Models.OpcionPregunta", b =>
                {
                    b.Property<int>("IdOp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_OP")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPreguntaOp")
                        .HasColumnName("Id_Pregunta_OP");

                    b.Property<string>("TextoOp")
                        .IsRequired()
                        .HasColumnName("Texto_OP")
                        .HasMaxLength(600)
                        .IsUnicode(false);

                    b.HasKey("IdOp");

                    b.HasIndex("IdPreguntaOp");

                    b.ToTable("OPCION_PREGUNTA");
                });

            modelBuilder.Entity("API.Models.Orientacion", b =>
                {
                    b.Property<int>("IdOrientacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Orientacion")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreOrientacion")
                        .IsRequired()
                        .HasColumnName("Nombre_Orientacion")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdOrientacion");

                    b.ToTable("ORIENTACION");
                });

            modelBuilder.Entity("API.Models.Ponderacion", b =>
                {
                    b.Property<int>("IdNodoActual")
                        .HasColumnName("Id_Nodo_Actual");

                    b.Property<int>("IdNodoAdyacente")
                        .HasColumnName("Id_Nodo_Adyacente");

                    b.Property<int>("Ponderacion1")
                        .HasColumnName("Ponderacion");

                    b.HasKey("IdNodoActual", "IdNodoAdyacente");

                    b.HasIndex("IdNodoAdyacente");

                    b.ToTable("PONDERACION");
                });

            modelBuilder.Entity("API.Models.Posts", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("API.Models.Pregunta", b =>
                {
                    b.Property<int>("IdPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Pregunta")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdEncuestaPregunta")
                        .HasColumnName("Id_Encuesta_Pregunta");

                    b.Property<string>("TextoPregunta")
                        .IsRequired()
                        .HasColumnName("Texto_Pregunta")
                        .HasMaxLength(600)
                        .IsUnicode(false);

                    b.HasKey("IdPregunta");

                    b.HasIndex("IdEncuestaPregunta");

                    b.ToTable("PREGUNTA");
                });

            modelBuilder.Entity("API.Models.Prueba", b =>
                {
                    b.Property<int>("IdPrueba")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Prueba")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaPrueba")
                        .HasColumnName("Fecha_Prueba")
                        .HasColumnType("date");

                    b.Property<int>("HoraFinPrueba")
                        .HasColumnName("Hora_Fin_Prueba");

                    b.Property<int>("HoraInicioPrueba")
                        .HasColumnName("Hora_Inicio_Prueba");

                    b.Property<int>("IdDocentePrueba")
                        .HasColumnName("Id_Docente_Prueba");

                    b.Property<int>("IdGrupoPrueba")
                        .HasColumnName("Id_Grupo_Prueba");

                    b.Property<int>("IdMateriaPrueba")
                        .HasColumnName("Id_Materia_Prueba");

                    b.Property<string>("TemasPrueba")
                        .IsRequired()
                        .HasColumnName("Temas_Prueba")
                        .HasMaxLength(600)
                        .IsUnicode(false);

                    b.Property<string>("TipoPrueba")
                        .IsRequired()
                        .HasColumnName("Tipo_Prueba")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("IdPrueba");

                    b.HasIndex("HoraFinPrueba");

                    b.HasIndex("HoraInicioPrueba");

                    b.HasIndex("IdDocentePrueba");

                    b.HasIndex("IdGrupoPrueba");

                    b.HasIndex("IdMateriaPrueba");

                    b.ToTable("PRUEBA");
                });

            modelBuilder.Entity("API.Models.RespuestaEncuesta", b =>
                {
                    b.Property<int>("IdRespustaEncuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Respusta_Encuesta")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPreguntaRespondida")
                        .HasColumnName("Id_Pregunta_Respondida");

                    b.Property<int>("IdRespuesta")
                        .HasColumnName("Id_Respuesta");

                    b.Property<int>("IdUsuarioEncuestado")
                        .HasColumnName("Id_Usuario_Encuestado");

                    b.HasKey("IdRespustaEncuesta");

                    b.HasIndex("IdPreguntaRespondida");

                    b.HasIndex("IdRespuesta");

                    b.HasIndex("IdUsuarioEncuestado");

                    b.ToTable("RESPUESTA_ENCUESTA");
                });

            modelBuilder.Entity("API.Models.Tarea", b =>
                {
                    b.Property<int>("IdTarea")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Tarea")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContenidoTarea")
                        .IsRequired()
                        .HasColumnName("Contenido_Tarea")
                        .HasMaxLength(600)
                        .IsUnicode(false);

                    b.Property<int>("IdDocente")
                        .HasColumnName("Id_Docente");

                    b.Property<int?>("IdMateriaTarea")
                        .HasColumnName("Id_Materia_Tarea");

                    b.HasKey("IdTarea");

                    b.HasIndex("IdDocente");

                    b.HasIndex("IdMateriaTarea");

                    b.ToTable("TAREA");
                });

            modelBuilder.Entity("API.Models.TareaGrupo", b =>
                {
                    b.Property<int>("IdTg")
                        .HasColumnName("Id_TG");

                    b.Property<int>("IdGrupoTg")
                        .HasColumnName("Id_Grupo_TG");

                    b.Property<DateTime>("FechaEntregaTg")
                        .HasColumnName("Fecha_Entrega_TG")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaTg")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Fecha_TG")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdTg", "IdGrupoTg");

                    b.HasIndex("IdGrupoTg");

                    b.ToTable("TAREA_GRUPO");
                });

            modelBuilder.Entity("API.Models.Turno", b =>
                {
                    b.Property<int>("IdTurno")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Turno")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreTurno")
                        .IsRequired()
                        .HasColumnName("Nombre_Turno")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("IdTurno");

                    b.ToTable("TURNO");
                });

            modelBuilder.Entity("API.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Usr")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoUsr")
                        .HasColumnName("Apellido_Usr")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("CedulaUsr")
                        .IsRequired()
                        .HasColumnName("Cedula_Usr")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CelularUsr")
                        .HasColumnName("Celular_Usr")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("NombreUsr")
                        .HasColumnName("Nombre_Usr")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<byte[]>("PassHashUsr")
                        .IsRequired()
                        .HasColumnName("PassHash_Usr")
                        .HasMaxLength(64);

                    b.Property<Guid?>("Salt");

                    b.Property<string>("TokenUsr")
                        .HasColumnName("Token_Usr")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdUsr");

                    b.HasIndex("CedulaUsr")
                        .IsUnique()
                        .HasName("UQ__USUARIO__8F289EF0749E37D8");

                    b.ToTable("USUARIO");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Models.Administrador", b =>
                {
                    b.HasOne("API.Models.Usuario", "IdUsrAdminNavigation")
                        .WithMany("Administrador")
                        .HasForeignKey("IdUsrAdmin")
                        .HasConstraintName("FK__ADMINISTR__Id_Us__2F10007B");
                });

            modelBuilder.Entity("API.Models.Adscripto", b =>
                {
                    b.HasOne("API.Models.Usuario", "IdUsrAdscriptoNavigation")
                        .WithMany("Adscripto")
                        .HasForeignKey("IdUsrAdscripto")
                        .HasConstraintName("FK__ADSCRIPTO__Id_Us__2B3F6F97");

                    b.HasOne("API.Models.Turno", "TurnoAdscriptoNavigation")
                        .WithMany("Adscripto")
                        .HasForeignKey("TurnoAdscripto")
                        .HasConstraintName("FK__ADSCRIPTO__Turno__2C3393D0");
                });

            modelBuilder.Entity("API.Models.Alumno", b =>
                {
                    b.HasOne("API.Models.Grupo", "GrupoUsrNavigation")
                        .WithMany("Alumno")
                        .HasForeignKey("GrupoUsr")
                        .HasConstraintName("FK__ALUMNO__Grupo_Us__24927208");

                    b.HasOne("API.Models.Usuario", "IdUsrAlumnoNavigation")
                        .WithMany("Alumno")
                        .HasForeignKey("IdUsrAlumno")
                        .HasConstraintName("FK__ALUMNO__Id_Usr_A__239E4DCF");
                });

            modelBuilder.Entity("API.Models.Beacon", b =>
                {
                    b.HasOne("API.Models.Nodo", "IdNodoBeaconNavigation")
                        .WithMany("Beacon")
                        .HasForeignKey("IdNodoBeacon")
                        .HasConstraintName("FK__BEACON__Id_Nodo___35BCFE0A");
                });

            modelBuilder.Entity("API.Models.Docente", b =>
                {
                    b.HasOne("API.Models.Usuario", "IdUsrDocenteNavigation")
                        .WithMany("Docente")
                        .HasForeignKey("IdUsrDocente")
                        .HasConstraintName("FK__DOCENTE__Id_Usr___276EDEB3");

                    b.HasOne("API.Models.Materia", "MateriaDocenteNavigation")
                        .WithMany("Docente")
                        .HasForeignKey("MateriaDocente")
                        .HasConstraintName("FK__DOCENTE__Materia__286302EC");
                });

            modelBuilder.Entity("API.Models.Encuesta", b =>
                {
                    b.HasOne("API.Models.Usuario", "CreadorEncuestaNavigation")
                        .WithMany("Encuesta")
                        .HasForeignKey("CreadorEncuesta")
                        .HasConstraintName("FK__ENCUESTA__Creado__5FB337D6");
                });

            modelBuilder.Entity("API.Models.Grupo", b =>
                {
                    b.HasOne("API.Models.Orientacion", "OrientacionGrupoNavigation")
                        .WithMany("Grupo")
                        .HasForeignKey("OrientacionGrupo")
                        .HasConstraintName("FK__GRUPO__Orientaci__1CF15040");

                    b.HasOne("API.Models.Turno", "TurnoGrupoNavigation")
                        .WithMany("Grupo")
                        .HasForeignKey("TurnoGrupo")
                        .HasConstraintName("FK__GRUPO__Turno_Gru__1DE57479");
                });

            modelBuilder.Entity("API.Models.Horario", b =>
                {
                    b.HasOne("API.Models.HoraTurno", "HoraHorarioNavigation")
                        .WithMany("Horario")
                        .HasForeignKey("HoraHorario")
                        .HasConstraintName("FK__HORARIO__Hora_Ho__3E52440B");

                    b.HasOne("API.Models.Docente", "IdDocenteHorarioNavigation")
                        .WithMany("Horario")
                        .HasForeignKey("IdDocenteHorario")
                        .HasConstraintName("FK__HORARIO__Id_Doce__403A8C7D");

                    b.HasOne("API.Models.Grupo", "IdGrupoHorarioNavigation")
                        .WithMany("Horario")
                        .HasForeignKey("IdGrupoHorario")
                        .HasConstraintName("FK__HORARIO__Id_Grup__3D5E1FD2");

                    b.HasOne("API.Models.Materia", "IdMateriaHorarioNavigation")
                        .WithMany("Horario")
                        .HasForeignKey("IdMateriaHorario")
                        .HasConstraintName("FK__HORARIO__Id_Mate__3F466844");

                    b.HasOne("API.Models.Nodo", "IdSalonNavigation")
                        .WithMany("Horario")
                        .HasForeignKey("IdSalon")
                        .HasConstraintName("FK__HORARIO__Id_Salo__412EB0B6");
                });

            modelBuilder.Entity("API.Models.HoraTurno", b =>
                {
                    b.HasOne("API.Models.Hora", "HoraHtNavigation")
                        .WithMany("HoraTurno")
                        .HasForeignKey("HoraHt")
                        .HasConstraintName("FK__HORA_TURN__Hora___164452B1");

                    b.HasOne("API.Models.Turno", "TurnoHtNavigation")
                        .WithMany("HoraTurno")
                        .HasForeignKey("TurnoHt")
                        .HasConstraintName("FK__HORA_TURN__Turno__173876EA");
                });

            modelBuilder.Entity("API.Models.Materia", b =>
                {
                    b.HasOne("API.Models.Orientacion", "OrientacionMateriaNavigation")
                        .WithMany("Materia")
                        .HasForeignKey("OrientacionMateria")
                        .HasConstraintName("FK__MATERIA__Orienta__1A14E395");
                });

            modelBuilder.Entity("API.Models.NotificacionDestinatario", b =>
                {
                    b.HasOne("API.Models.Grupo", "GrupoActualUsrNavigation")
                        .WithMany("NotificacionDestinatario")
                        .HasForeignKey("GrupoActualUsr")
                        .HasConstraintName("FK__NOTIFICAC__Grupo__4AB81AF0");

                    b.HasOne("API.Models.Usuario", "IdDestinatarioNavigation")
                        .WithMany("NotificacionDestinatario")
                        .HasForeignKey("IdDestinatario")
                        .HasConstraintName("FK__NOTIFICAC__Id_De__49C3F6B7");

                    b.HasOne("API.Models.Notificacion", "IdNdNavigation")
                        .WithMany("NotificacionDestinatario")
                        .HasForeignKey("IdNd")
                        .HasConstraintName("FK__NOTIFICAC__Id_ND__48CFD27E");
                });

            modelBuilder.Entity("API.Models.OpcionPregunta", b =>
                {
                    b.HasOne("API.Models.Pregunta", "IdPreguntaOpNavigation")
                        .WithMany("OpcionPregunta")
                        .HasForeignKey("IdPreguntaOp")
                        .HasConstraintName("FK__OPCION_PR__Id_Pr__656C112C");
                });

            modelBuilder.Entity("API.Models.Ponderacion", b =>
                {
                    b.HasOne("API.Models.Nodo", "IdNodoActualNavigation")
                        .WithMany("PonderacionIdNodoActualNavigation")
                        .HasForeignKey("IdNodoActual")
                        .HasConstraintName("FK__PONDERACI__Id_No__38996AB5");

                    b.HasOne("API.Models.Nodo", "IdNodoAdyacenteNavigation")
                        .WithMany("PonderacionIdNodoAdyacenteNavigation")
                        .HasForeignKey("IdNodoAdyacente")
                        .HasConstraintName("FK__PONDERACI__Id_No__398D8EEE");
                });

            modelBuilder.Entity("API.Models.Pregunta", b =>
                {
                    b.HasOne("API.Models.Encuesta", "IdEncuestaPreguntaNavigation")
                        .WithMany("Pregunta")
                        .HasForeignKey("IdEncuestaPregunta")
                        .HasConstraintName("FK__PREGUNTA__Id_Enc__628FA481");
                });

            modelBuilder.Entity("API.Models.Prueba", b =>
                {
                    b.HasOne("API.Models.HoraTurno", "HoraFinPruebaNavigation")
                        .WithMany("PruebaHoraFinPruebaNavigation")
                        .HasForeignKey("HoraFinPrueba")
                        .HasConstraintName("FK__PRUEBA__Hora_Fin__5CD6CB2B");

                    b.HasOne("API.Models.HoraTurno", "HoraInicioPruebaNavigation")
                        .WithMany("PruebaHoraInicioPruebaNavigation")
                        .HasForeignKey("HoraInicioPrueba")
                        .HasConstraintName("FK__PRUEBA__Hora_Ini__5BE2A6F2");

                    b.HasOne("API.Models.Docente", "IdDocentePruebaNavigation")
                        .WithMany("Prueba")
                        .HasForeignKey("IdDocentePrueba")
                        .HasConstraintName("FK__PRUEBA__Id_Docen__5AEE82B9");

                    b.HasOne("API.Models.Grupo", "IdGrupoPruebaNavigation")
                        .WithMany("Prueba")
                        .HasForeignKey("IdGrupoPrueba")
                        .HasConstraintName("FK__PRUEBA__Id_Grupo__59FA5E80");

                    b.HasOne("API.Models.Materia", "IdMateriaPruebaNavigation")
                        .WithMany("Prueba")
                        .HasForeignKey("IdMateriaPrueba")
                        .HasConstraintName("FK__PRUEBA__Id_Mater__59063A47");
                });

            modelBuilder.Entity("API.Models.RespuestaEncuesta", b =>
                {
                    b.HasOne("API.Models.Pregunta", "IdPreguntaRespondidaNavigation")
                        .WithMany("RespuestaEncuesta")
                        .HasForeignKey("IdPreguntaRespondida")
                        .HasConstraintName("FK__RESPUESTA__Id_Pr__75A278F5");

                    b.HasOne("API.Models.OpcionPregunta", "IdRespuestaNavigation")
                        .WithMany("RespuestaEncuesta")
                        .HasForeignKey("IdRespuesta")
                        .HasConstraintName("FK__RESPUESTA__Id_Re__76969D2E");

                    b.HasOne("API.Models.Usuario", "IdUsuarioEncuestadoNavigation")
                        .WithMany("RespuestaEncuesta")
                        .HasForeignKey("IdUsuarioEncuestado")
                        .HasConstraintName("FK__RESPUESTA__Id_Us__74AE54BC");
                });

            modelBuilder.Entity("API.Models.Tarea", b =>
                {
                    b.HasOne("API.Models.Docente", "IdDocenteNavigation")
                        .WithMany("Tarea")
                        .HasForeignKey("IdDocente")
                        .HasConstraintName("FK__TAREA__Id_Docent__4D94879B");

                    b.HasOne("API.Models.Materia", "IdMateriaTareaNavigation")
                        .WithMany("Tarea")
                        .HasForeignKey("IdMateriaTarea")
                        .HasConstraintName("FK__TAREA__Id_Materi__4E88ABD4");
                });

            modelBuilder.Entity("API.Models.TareaGrupo", b =>
                {
                    b.HasOne("API.Models.Grupo", "IdGrupoTgNavigation")
                        .WithMany("TareaGrupo")
                        .HasForeignKey("IdGrupoTg")
                        .HasConstraintName("FK__TAREA_GRU__Id_Gr__534D60F1");

                    b.HasOne("API.Models.Tarea", "IdTgNavigation")
                        .WithMany("TareaGrupo")
                        .HasForeignKey("IdTg")
                        .HasConstraintName("FK__TAREA_GRU__Id_TG__52593CB8");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
